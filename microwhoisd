#!/usr/bin/env python3

import os, sys, argparse, pwd, grp, socket, socketserver

def parseArgs():
	parser = argparse.ArgumentParser(description='Micro implementation of an whois server.', formatter_class=argparse.RawTextHelpFormatter)
	parser.add_argument('--listen', dest='address', default='localhost', help='Address to listen on (default: localhost)')
	parser.add_argument('--port', dest='port', type=int, default=43, help='Port (default: 43)')
	parser.add_argument('--file', dest='file_path', default='teste.txt', help='File to parse and retrive data (default: teste.txt)')
	parser.add_argument('--uid', default='nobody', help='Run with this user after creating socket (default: nobody)')
	parser.add_argument('--gid', default='nobody', help='Run with this group after creating socket (default: nobody)')

	args = parser.parse_args()

	return (args.address, args.port, args.file_path, args.uid, args.gid)

def dropRoot(uid, gid):
    uid_name = uid
    gid_name = gid

    try:
            running_uid = pwd.getpwnam(uid_name).pw_uid
    except KeyError:
            print('The user \'%s\' does not exist. Create it or change the user with the option --uid' % uid)
            sys.exit(1)

    try:
            running_gid = grp.getgrnam(gid_name).gr_gid
    except KeyError:
            print('The group \'%s\' does not exist. Create it or change the group with the option --gid' % gid)
            sys.exit(1)

    os.setgroups([])
    os.setgid(running_gid)
    os.setuid(running_uid)

def getResponse(query):
    response = ""

    with open(FILE, encoding='utf-8') as fp:
        for record in fp:
            fields = record.split()
            if len(fields) < 1:
                continue
            if fields[0] == query:
                response += record

    return response

class TCPHandler(socketserver.StreamRequestHandler):

    def handle(self):
            try:
                query = self.rfile.readline().rstrip().decode('utf-8')
            except UnicodeDecodeError as e:
                return
            self.wfile.write(bytes(getResponse(query), 'utf-8'))

class V6Server(socketserver.TCPServer):
    address_family = socket.AF_INET6

if __name__ == "__main__":

    (listen_address, port, file_path, uid, gid) = parseArgs()
    FILE = file_path

    socketserver.TCPServer.allow_reuse_address = True

    try:
        try:
            server = V6Server((listen_address, port), TCPHandler)
        except OSError:
            # Use IPv4 socket
            server = socketserver.TCPServer((listen_address, port), TCPHandler)

    except socket.error as e:
        print('Could not open socket on port %d. Are you root? (%s)' % (port, e))
        sys.exit()

    if os.geteuid() == 0:
        dropRoot(uid, gid)

    server.serve_forever()
